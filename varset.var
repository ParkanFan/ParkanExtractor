//VAR( Type, Name, DefValue, Minimum, Maximum, Comment)
//STRING( Size, Name, DefValue, Comment)

// Numbers like vars
VAR( float, f0, 0)
VAR( float, f1, 1)
VAR( float, f2, 2)
VAR( float, f3, 3)
VAR( float, f4, 4)
VAR( float, f5, 5)
VAR( float, f6, 6)
VAR( float, f7, 7)
VAR( float, f8, 8)
VAR( float, f9, 9)
///////////////////////////////////////


// Numbers like vars
VAR( DWORD, d0, 0)
VAR( DWORD, d1, 1)
VAR( DWORD, d2, 2)
VAR( DWORD, d3, 3)
VAR( DWORD, d4, 4)
VAR( DWORD, d5, 5)
VAR( DWORD, d6, 6)
VAR( DWORD, d7, 7)
VAR( DWORD, d8, 8)
VAR( DWORD, d9, 9)
///////////////////////////////////////



////// var names that controlled via CPP
VAR( DWORD, dCurrentProblem,	0)			// this variable is changed from CPP code (number in CProblem array)
VAR( DWORD, dCurrentSender,	0)			// this variable is changed from CPP code ( LogicID )
VAR( float, fDifficulty, 	0.5)			// Be careful this var changing from CPP code
VAR( DWORD, dMaxBuilder, 	1)			// max number of units (used by CPP)
VAR( DWORD, dMaxTower,	 	3)			// max number of units (used by CPP)
VAR( DWORD, dMaxTransport, 	1)			// max number of units (used by CPP)
VAR( DWORD, dMaxMine, 		1)			// max number of units (used by CPP)
VAR( DWORD, dMaxPlant, 		1)			// max number of units (used by CPP)
VAR( DWORD, dMaxStorage, 	1)			// max number of units (used by CPP)

VAR( DWORD, dTechnologyFactor,	0)		// READ ONLY (this var changing from CPP code)
VAR( DWORD, dBaseFactor,	0)		// READ ONLY (this var changing from CPP code)
VAR( DWORD, dUnitBattleFactor,	0)		// READ ONLY (this var changing from CPP code)
VAR( DWORD, dArealFactor,	0)		// READ ONLY (this var changing from CPP code)
////////////////////////////////////////


// Game Intellegent and Clan settings

VAR( float, fHazard, 0.5)							// рискованность
VAR( float, fAvidity, 0.5)							// жадность (качество <-> количество)
VAR( float, fPry, 0.5)								// любопытство
VAR( float, fAgressive, 0.5)						// агрессивность

VAR( float, fPlentyEnergyLevel, 0.1)				// Energy level that will generate N_E_Energy problem

VAR( float, fPlentyResourceSpace, 60)				// if Summary resource space > than fPlentyResSpace, 
								// then transporting should be optimized
VAR( float, fPlentyResourceAmount, 2400)				// if Summary resource amount < than fPlentyResAmount, 
								// then we should try to find another resources
VAR( DWORD, dBuildingProtectHits, 2000000)			// how much hit points should be situated near building for defence
VAR( DWORD, dPlaceProtectHits, 2000000)				// how much hit points should be situated near place for defence
///////////////////////////////////////





// Expression variables
VAR( DWORD, EXP_TARGET_BY_LOGIC_ID,		0x0)			// Expression target by logic ID
VAR( DWORD, EXP_TARGET_BY_GROUP_ID,		0x1)			// Expression target by group ID

VAR( DWORD, ACTION_DESTROY,			0x1)			// what to do with expression
VAR( DWORD, ACTION_NOTHING_DOING,		0x2)			// what to do with expression
VAR( DWORD, ACTION_CAPTURE_BUILDING,		0x3)			// When building capture	
VAR( DWORD, ACTION_GROUP_DESTROY,		0x4)			// When all units in group killed	
VAR( DWORD, ACTION_GROUP_NOTHING_DOING,		0x5)			// When all units in group nothing to do	
///////////////////////



// Clan Problems definition (should defined in Cpp as Constants)

VAR( DWORD, PBM_NO_PROBLEM,			0)
VAR( DWORD, PBM_MINE_NEEDED,			1)
VAR( DWORD, PBM_N_E_ENERGY,			2)
VAR( DWORD, PBM_BUILDING_NEEDED,		3)
VAR( DWORD, PBM_N_OPTIMAL_TRANSPORT,		4)
VAR( DWORD, PBM_BUNKER_NEEDED,			5)
VAR( DWORD, PBM_ROBOT_NEEDED,			6)
VAR( DWORD, PBM_BUILDING_ATTACK,		7)
VAR( DWORD, PBM_BUILDING_PROTECT,		8)
VAR( DWORD, PBM_BUILDING_CAPTURE,		9)
VAR( DWORD, PBM_MAKE_RESEARCH,			10)
VAR( DWORD, PBM_PLACE_PROTECT,			11)
VAR( DWORD, PBM_BASE_DEFENCE,			12)
VAR( DWORD, PBM_ATTACK_UNIT,			13)
VAR( DWORD, PBM_BUILDING_INF_CAPTURE,		14)
VAR( DWORD, PBM_UPGRADE_NEEDED,			15)
///////////////////////////////////////



///// Messages
VAR( DWORD, SYSTEM_MESSAGE,			0x0)
VAR( DWORD, MESSAGE_INFO,			0x1)
VAR( DWORD, CLAN_HERO_KILLED,			0x2)
VAR( DWORD, OBJECTIVE_COMPLETE,			0x3)
VAR( DWORD, OBJECTIVE_FAILED,			0x4)
VAR( DWORD, OBJECTIVE_PROGRESS,			0x5)

VAR( DWORD, MISSION_FAILED,			0x0)
VAR( DWORD, MISSION_COMPLETE,			0x1)
//////////////////////////////////



// All system definition (should ident with constants in Visual C++)
VAR( DWORD, ORDER_ROBOT_STOP,		0x01)
VAR( DWORD, ORDER_ROBOT_GO,		0x02)
VAR( DWORD, ORDER_ROBOT_ATTACK,		0x03)
VAR( DWORD, ORDER_ROBOT_PATROL,		0x04)
VAR( DWORD, ORDER_ROBOT_SEARCH,		0x05)
VAR( DWORD, ORDER_ROBOT_TRANSPORT,	0x06)
VAR( DWORD, ORDER_ROBOT_BUILD,		0x07)
VAR( DWORD, ORDER_ROBOT_RELOAD,		0x08)
VAR( DWORD, ORDER_ROBOT_REPARE,		0x09)
VAR( DWORD, ORDER_ROBOT_CAPTURE,	0x11)
VAR( DWORD, ORDER_ROBOT_RANDOMGO,	0x0D)
VAR( DWORD, ORDER_ROBOT_SHUTDOWN,	0x13)
VAR( DWORD, ORDER_ROBOT_LEAVE,		0x14)
VAR( DWORD, ORDER_ROBOT_STAYGROUND,	0x15)
VAR( DWORD, ORDER_ROBOT_FOLLOW,		0x16)
VAR( DWORD, ORDER_ROBOT_GETONBOARD,	0x17)
VAR( DWORD, ORDER_ROBOT_UPGRADE,	0x18)


VAR( DWORD, ORDER_BUILDING_MINE,	0x0A)
VAR( DWORD, ORDER_BUILDING_CHARGE,	0x0B)
VAR( DWORD, ORDER_BUILDING_CONSTRUCT, 0x0C)

VAR( DWORD, TARGET_BY_LOGIC_ID,		0x0201)
VAR( DWORD, TARGET_BY_PLACE,		0x0202)
VAR( DWORD, TARGET_BY_TYPE,			0x0203)
VAR( DWORD, TARGET_NOT_DEFINED,		0x0204)
VAR( DWORD, TARGET_BY_NAME,			0x0205)


VAR( DWORD, INSERT_ORDER_TO_END,	0x01)
VAR( DWORD, INSERT_ORDER_TO_START,	0x02)
VAR( DWORD, INSERT_ORDER_REPLACE,	0x03)
///////////////////////////////////////


//// Building types
VAR( DWORD, BUILDING_BUNKER_SMALL,		0x80010000)
VAR( DWORD, BUILDING_BUNKER_MEDIUM,		0x80020000)
VAR( DWORD, BUILDING_BUNKER_LARGE,		0x80040000)
VAR( DWORD, BUILDING_GENERATOR,			0x80000002)
VAR( DWORD, BUILDING_MINE,			0x80000004)
VAR( DWORD, BUILDING_STORAGE,			0x80000008)
VAR( DWORD, BUILDING_PLANT,			0x80000010)
VAR( DWORD, BUILDING_HANGAR,			0x80000040)
VAR( DWORD, BUILDING_TOWER_MEDIUM,		0x80100000)
VAR( DWORD, BUILDING_TOWER_LARGE,		0x80200000)
VAR( DWORD, BUILDING_MAINTELEPORT,		0x80000200)
VAR( DWORD, BUILDING_INSTITUTE,			0x80000400)
VAR( DWORD, BUILDING_BRIDGE,			0x80001000)
VAR( DWORD, BUILDING_RUINE,			0x80002000)
///////////////////////////////////////


//// Robot types
VAR( DWORD, ROBOT_TRANSPORT,			0x01002000)
VAR( DWORD, ROBOT_BUILDER,			0x01004000)
VAR( DWORD, ROBOT_BATTLEUNIT,			0x01008000)
VAR( DWORD, ROBOT_HQ,				0x01010000)
VAR( DWORD, ROBOT_HERO,				0x01020000)
///////////////////////////////////////


//// CLASSES for GetClanUnitNumber()
VAR( DWORD, CLASS_BUILDING,			0x80000000)
VAR( DWORD, CLASS_ROBOT,			0x01000000)
VAR( DWORD, CLASS_ANIMAL,			0x20000000)
///////////////////////////////////////



//// Resorce types
VAR( DWORD, RESOURCE_ENERGY,			0x02000001)
VAR( DWORD, RESOURCE_FUEL,			0x02000002)
VAR( DWORD, RESOURCE_ORE,			0x02000100)
VAR( DWORD, RESOURCE_LEFT_ORE,			0x0afc0900)
///////////////////////////////////////

//// Mech selection types
VAR( DWORD, SELECT_BEST_WEAPON,			0x1)
VAR( DWORD, SELECT_BEST_ARMOR,			0x2)
VAR( DWORD, SELECT_BEST_RANGE,			0x3)
VAR( DWORD, SELECT_FASTEST,			0x4)
VAR( DWORD, SELECT_BEST_COMBAT,			0x5)
VAR( DWORD, SELECT_SMALLEST,			0x6)
////////////////////////////////////////////////////////////

//// Problem status
VAR( DWORD, ST_NONE,				0x0)
VAR( DWORD, ST_SOLVING,				0x1)
VAR( DWORD, ST_SOLVED,				0x2)
VAR( DWORD, ST_UNSOLVED,			0x3)
///////////////////////////////////////

//// CountSummaryClanBF flags
VAR( DWORD, FREE_UNITS,				0x0);
VAR( DWORD, ALL_UNITS,				0x1);
///////////////////////////////////////


///////// cSetTaskBasis flags
VAR( DWORD, OR_TASK,				0x0);
VAR( DWORD, AND_TASK,				0x1);
///////////////////////////////////////




//// For cCreateGroup
VAR( DWORD, CREATE_EMPTY,			0x0);
VAR( DWORD, TAKE_ALL_FREE,			0x1);
VAR( DWORD, TAKE_BY_HITS,			0x2);
VAR( DWORD, TAKE_ALL_BATTLE_UNITS,		0x3);
///////////////////////


//// Unit Critical status
VAR( DWORD, UNIT_NORMAL,			0x0)
VAR( DWORD, UNIT_CRITICAL,			0x1)
///////////////////////////////////////

//// For GetUnit and cGetUnit functions
VAR( DWORD, UNIT_FREE_UNIT,			0x0)
VAR( DWORD, UNIT_FREE_CAPTURER,			0x1)
VAR( DWORD, UNIT_ANY_UNIT,			0x2)
VAR( DWORD, UNIT_ANY_CAPTURER,			0x3)
VAR( DWORD, UNIT_ANY_NEAREST_CAPTURER,		0x4)
///////////////////////////////////////


//// For cGetUnitFromProblem function
VAR( DWORD, UNIT_CAPTURER,			0x0)
///////////////////////////////////////


//// Some other constants
VAR( DWORD, NONE,					0x0)
VAR( DWORD, FALSE,					0x0)
VAR( DWORD, TRUE,					0x1)
VAR( DWORD, ERROR,					0xffffffff)
VAR( DWORD, PLAYER_CLAN,			0x0)
///////////////////////////////////////












// temporary vars

VAR( float, fTemp, 0)
VAR( float, fTemp1, 0)
VAR( float, fTemp2, 0)
VAR( float, fTemp3, 0)
VAR( float, fTemp4, 0)
VAR( float, fTemp5, 0)
VAR( float, fT, 0)


VAR( float, fSuccess, 0.5)
VAR( float, fSurvive, 0.5)
VAR( float, fTime, 0.5)
VAR( float, fIndependence, 0.5)


VAR( DWORD, dMessageCount, 0)
VAR( DWORD, dMCount, 0)


VAR( DWORD, dTemp, 0)
VAR( DWORD, dTemp1, 0)
VAR( DWORD, dTemp2, 0)
VAR( DWORD, dTemp3, 0)
VAR( DWORD, dTemp4, 0)
VAR( DWORD, dTemp5, 0)

VAR( DWORD, dT, 0)
VAR( DWORD, dT0, 0)
VAR( DWORD, dT1, 0)
VAR( DWORD, dT2, 0)
VAR( DWORD, dT3, 0)
VAR( DWORD, dT4, 0)
VAR( DWORD, dT5, 0)
VAR( DWORD, dT6, 0)
VAR( DWORD, dT7, 0)
VAR( DWORD, dT8, 0)
VAR( DWORD, dT9, 0)

// Flags

VAR( DWORD, df0, 0)
VAR( DWORD, df1, 0)
VAR( DWORD, df2, 0)
VAR( DWORD, df3, 0)
VAR( DWORD, df4, 0)
VAR( DWORD, df5, 0)
VAR( DWORD, df6, 0)
VAR( DWORD, df7, 0)
VAR( DWORD, df8, 0)
VAR( DWORD, df9, 0)

// Cycle points

VAR( DWORD, dcl0, 0)
VAR( DWORD, dcl1, 0)

VAR( DWORD, dSpecialTemp, 0)
VAR( DWORD, dSpecialTemp1, 0)
VAR( DWORD, dSpecialTemp2, 0)




// Timers 
VAR( DWORD, dTime0, 0)
VAR( DWORD, dTime1, 0)
VAR( DWORD, dTime2, 0)
VAR( DWORD, dTime3, 0)
VAR( DWORD, dTime4, 0)
VAR( DWORD, dTime5, 0)
VAR( DWORD, dTime6, 0)
VAR( DWORD, dTime7, 0)
VAR( DWORD, dTime8, 0)
VAR( DWORD, dTime9, 0)
///////////////////////////////////////


VAR( DWORD, dHitPoints, 0)

VAR( DWORD, dAttackGroup, 0)

VAR( DWORD, dMineNumber, 0)
VAR( DWORD, dStorageNumber, 0)
VAR( DWORD, dFactoryNumber, 0)
VAR( DWORD, dInstituteNumber, 0)
VAR( DWORD, dHangarNumber, 0)
VAR( DWORD, dTowerNumber, 0)
VAR( DWORD, dFreeWarBotsNum, 0)
VAR( DWORD, dFreeMindNumber, 0)
VAR( DWORD, dLargeResearched, 0)

VAR( DWORD, ClanBaseX, 950);
VAR( DWORD, ClanBaseY, 1000);
VAR( DWORD, ClanID, 0);


VAR( DWORD, dX, 0)
VAR( DWORD, dY, 0)
VAR( float, fX, 0)
VAR( float, fY, 0)
///////////////////////////////////////